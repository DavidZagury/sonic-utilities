{% from "common.j2" import cli_name -%}
""" Autogenerated show CLI plugin """

import click
import tabulate
import utilities_common.cli as clicommon


{% for table in tables %}
{% if "static_objects" in table %}
@click.group(name="{{ cli_name(table.name) }}", cls=clicommon.AliasedGroup)
def {{ table.name }}():
    """ {{ table.description }}"""

    pass

{% for object in table.static_objects %}
@{{ table.name }}.command(name="{{ cli_name(object.name) }}")
@clicommon.pass_db
def {{ table.name }}_{{ object.name }}(db):
    """ {{ object.description }} """

    header = [
{%- for attr in object.attrs %}
        "{{ attr.name|upper() }}",
{%- endfor %}
    ]
    body = []

    table = db.cfgdb.get_table("{{ table.name }}")
    entry = table.get("{{ object.name }}")
    body.append(
        [
{%- for attr in object.attrs -%}
{%- if not attr.is_list %}
            entry.get("{{ attr.name }}", "N/A"),
{%- else %}
            "\n".join(entry.get("{{ attr.name }}", [])),
{%- endif %}
{%- endfor %}
        ]
    )
    click.echo(tabulate.tabulate(body, header))

{% endfor %}
{% elif "dynamic_objects" in table %}
{% if table.dynamic_objects|length > 1 %}
@click.group(name="{{ cli_name(table.name) }}",
             cls=clicommon.AliasedGroup)
def {{ table.name }}():
    """ {{ table.description }} """

    pass
{% endif %}
{% for object in table.dynamic_objects %}
{# Generate another nesting group in case table holds two types of objects #}
{% if table.dynamic_objects|length > 1 %}
{% set group = table.name %}
{% set name = object.name %}
{% else %}
{% set group = "click" %}
{% set name = table.name %}
{% endif %}

@{{ group }}.group(name="{{ cli_name(name) }}",
             cls=clicommon.AliasedGroup,
             invoke_without_command=True)
@clicommon.pass_db
def {{ name }}(db):
    """ {{ object.description }} """

    header = [
{%- for key in object["keys"] %}
        "{{ key.name|upper() }}",
{%- endfor %}
{%- for attr in object.attrs %}
        "{{ attr.name|upper() }}",
{%- endfor %}
    ]
    body = []

    table = db.cfgdb.get_table("{{ table.name }}")
    for key, entry in table.items():
        if not isinstance(key, tuple ):
            key = (key,)
        body.append(
            [
                *key,
{%- for attr in object.attrs -%}
{%- if not attr.is_list %}
                entry.get("{{ attr.name }}", "N/A"),
{%- else %}
                "\n".join(entry.get("{{ attr.name }}", [])),
{%- endif %}
{%- endfor %}
            ]
        )

    click.echo(tabulate.tabulate(body, header))
{% endfor %}
{% endif %}
{% endfor %}

def register(cli):
{%- for table in tables %}
    cli.add_command({{ table.name }})
{%- endfor %}

{{ tables|map(attribute="name")|first }}()