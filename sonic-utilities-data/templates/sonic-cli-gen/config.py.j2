{%- from "common.j2" import make_cli_name, key_converter -%}
""" Autogenerated config CLI plugin """

import click
from config import config_mgmt
import utilities_common.cli as clicommon


def exit_cli(*args, **kwargs):
    """ Print a message and abort CLI. """

    click.secho(*args, **kwargs)
    raise click.Abort()

def validate_config_or_raise(cfg):
    """ Validate config db data using ConfigMgmt """

    try:
        config_mgmt.ConfigMgmt().loadData(cfg)
    except Exception as err:
        raise Exception('Failed to validate configuration: {}'.format(err))


def mod_entry_validated(db, table, key, data):
    """ Modify existing entry and validate configuration """

    cfg = db.get_config()
    cfg.setdefault(table, {})
    cfg[table].setdefault(key, {})
    cfg[table][key].update(data)

    validate_config_or_raise(cfg)
    db.mod_entry(table, key, data)


def add_entry_validated(db, table, key, data):
    """ Add new entry in table and validate configuration"""

    cfg = db.get_config()
    cfg.setdefault(table, {})
    if key in cfg[table]:
        raise Exception(f"{key} already exists")
    cfg[table][key] = data

    validate_config_or_raise(cfg)
    db.set_entry(table, key, data)


def update_entry_validated(db, table, key, data):
    """ Update entry in table and validate configuration"""

    cfg = db.get_config()
    cfg.setdefault(table, {})
    if key not in cfg[table]:
        raise Exception(f"{key} does not exist")
    cfg[table][key].update(data)

    validate_config_or_raise(cfg)
    db.mod_entry(table, key, data)


def del_entry_validated(db, table, key):
    """ Delete entry in table and validate configuration """

    cfg = db.get_config()
    cfg.setdefault(table, {})
    if key not in cfg[table]:
        raise Exception(f"{key} does not exist")
    cfg[table].pop(key)

    validate_config_or_raise(cfg)
    db.set_entry(table, key, None)


def add_list_entry_validated(db, table, key, attr, data):
    """ Add new entry into list in table and validate configuration"""

    cfg = db.get_config()
    cfg.setdefault(table, {})
    if key not in cfg[table]:
        raise Exception(f"{key} does not exist")
    cfg[table][key].setdefault(attr, [])
    for entry in data:
        if entry in cfg[table][key][attr]:
            raise Exception(f"{entry} already exists")
        cfg[table][key][attr].append(entry)

    validate_config_or_raise(cfg)
    db.set_entry(table, key, {attr: cfg[table][key][attr]})


def del_list_entry_validated(db, table, key, attr, data):
    """ Delete entry from list in table and validate configuration"""

    cfg = db.get_config()
    cfg.setdefault(table, {})
    if key not in cfg[table]:
        raise Exception(f"{key} does not exist")
    cfg[table][key].setdefault(attr, [])
    for entry in data:
        if entry not in cfg[table][key][attr]:
            raise Exception(f"{entry} does not exist")
        cfg[table][key][attr].remove(entry)

    validate_config_or_raise(cfg)
    db.set_entry(table, key, {attr: cfg[table][key][attr]})


{% macro config_object_list_update(table, object, list) %}
@{{ table.name }}.group(name="{{ make_cli_name(list.name) }}")
def {{ table.name }}_{{ list.name }}():
    """ Add/Remove {{ list.name }} in {{ table.name }} """

    pass

@{{ table.name }}_{{ list.name }}.command(name="add")
{%- for key in object["keys"] %}
@click.argument("{{ make_cli_name(key.name) }}")
{%- endfor %}
@click.argument("{{ make_cli_name(list.name) }}", nargs=-1)
@clicommon.pass_db
def {{ table.name }}_{{ list.name }}_add(db,
                                         {{ object["keys"]|map(attribute="name")|join(",") }},
                                         {{ list.name|lower }}):
    """ Add {{ list.name }} in {{ table.name }} """

    table = "{{ table.name }}"
    key = {{ key_converter(object["keys"]) }}
    attr = "{{ list.name }}"
    data = {{ list.name|lower }}

    try:
        add_list_entry_validated(db.cfgdb, table, key, attr, data)
    except Exception as err:
        exit_cli(f"Error: {err}", fg="red")

@{{ table.name }}_{{ list.name }}.command(name="remove")
{%- for key in object["keys"] %}
@click.argument("{{ make_cli_name(key.name) }}")
{%- endfor %}
@click.argument("{{ make_cli_name(list.name) }}", nargs=-1)
@clicommon.pass_db
def {{ table.name }}_{{ list.name }}_remove(db,
                                         {{ object["keys"]|map(attribute="name")|join(",") }},
                                         {{ list.name|lower }}):
    """ Remove {{ list.name }} in {{ table.name }} """

    table = "{{ table.name }}"
    key = {{ key_converter(object["keys"]) }}
    attr = "{{ list.name }}"
    data = {{ list.name|lower }}

    try:
        del_list_entry_validated(db.cfgdb, table, key, attr, data)
    except Exception as err:
        exit_cli(f"Error: {err}", fg="red")
{% endmacro %}


{% macro config_object_list_update_all(table, object) %}
{% for list in object.lists %}
{{ config_object_list_update(table, object, list) }}
{% endfor %}
{% endmacro %}


{% macro config_static_object_attr(table, object, attr) %}
@{{ table.name }}_{{ object.name }}.command(name="{{ make_cli_name(attr.name) }}")
@click.argument("{{ make_cli_name(attr.name) }}")
@clicommon.pass_db
def {{ table.name }}_{{ object.name }}_{{ attr.name }}(db, {{ attr.name|lower }}):
    """ {{ attr.description|default("") }} """

    table = "{{ table.name }}"
    key = "{{ object.name }}"
    data = {
        "{{ attr.name }}": {{ attr.name|lower }},
    }
    try:
        mod_entry_validated(db.cfgdb, table, key, data)
    except Exception as err:
        exit_cli(f"Error: {err}", fg="red")
{% endmacro %}


{# Static objects config CLI generation
E.g:
    @TABLE.group(name="object")
    def TABLE_object(db):
#}
{% macro config_static_object(table, object) %}
@{{ table.name }}.group(name="{{ make_cli_name(object.name) }}")
@clicommon.pass_db
def {{ table.name }}_{{ object.name }}(db):
    """ {{ object.description|default("") }} """

    pass

{# Static objects attributes config CLI generation
E.g:
    @TABLE_object.command(name="attribute")
    def TABLE_object_attribute(db, attribute):
#}
{% for attr in object.attrs %}
{{ config_static_object_attr(table, object, attr) }}
{% endfor %}

{{ config_object_list_update_all(table, object) }}
{% endmacro %}

{# Dynamic objects config CLI generation #}

{# Dynamic objects add command
E.g:
    @TABLE.command(name="add")
    @click.argument("key1")
    @click.argument("key2")
    @click.option("--attr1")
    @click.option("--attr2")
    @click.option("--attr3")
    def TABLE_object_add(db, key1, key2, attr1, attr2, attr3):
#}
{% macro config_dynamic_object_add(table, object) %}
@{{ table.name }}.command(name="add")
{%- for key in object["keys"] %}
@click.argument("{{ make_cli_name(key.name) }}")
{%- endfor %}
{%- for attr in object.attrs + object.lists %}
@click.option("--{{ make_cli_name(attr.name) }}")
{%- endfor %}
@clicommon.pass_db
def {{ table.name }}_add(db,
                        {{ object["keys"]|map(attribute="name")|join(",") }},
                        {{ (object.attrs + object.lists)|map(attribute="name")|join(",") }}):
    """ Add object in {{ table.name }}. """

    table = "{{ table.name }}"
    key = {{ key_converter(object["keys"]) }}
    data = {}
{%- for attr in object.attrs %}
    if {{ attr.name|lower }} is not None:
        data["{{ attr.name }}"] = {{ attr.name|lower }}
{%- endfor %}
{%- for list in object.lists %}
    if {{ list.name|lower }} is not None:
        data["{{ list.name }}"] = {{ list.name|lower }}.split(",")
{%- endfor %}

    try:
        add_entry_validated(db.cfgdb, table, key, data)
    except Exception as err:
        exit_cli(f"Error: {err}", fg="red")
{% endmacro %}

{# Dynamic objects update command
E.g:
    @TABLE.command(name="update")
    @click.argument("key1")
    @click.argument("key2")
    @click.option("--attr1")
    @click.option("--attr2")
    @click.option("--attr3")
    def TABLE_object_update(db, key1, key2, attr1, attr2, attr3):
#}
{% macro config_dynamic_object_update(table, object) %}
@{{ table.name }}.command(name="update")
{%- for key in object["keys"] %}
@click.argument("{{ make_cli_name(key.name) }}")
{%- endfor %}
{%- for attr in object.attrs + object.lists %}
@click.option("--{{ make_cli_name(attr.name) }}")
{%- endfor %}
@clicommon.pass_db
def {{ table.name }}_update(db,
                        {{ object["keys"]|map(attribute="name")|join(",") }},
                        {{ (object.attrs + object.lists)|map(attribute="name")|join(",") }}):
    """ Add object in {{ table.name }}. """

    table = "{{ table.name }}"
    key = {{ key_converter(object["keys"]) }}
    data = {}
{%- for attr in object.attrs %}
    if {{ attr.name|lower }} is not None:
        data["{{ attr.name }}"] = {{ attr.name|lower }}
{%- endfor %}
{%- for list in object.lists %}
    if {{ list.name|lower }} is not None:
        data["{{ list.name }}"] = {{ list.name|lower }}.split(",")
{%- endfor %}

    try:
        update_entry_validated(db.cfgdb, table, key, data)
    except Exception as err:
        exit_cli(f"Error: {err}", fg="red")
{% endmacro %}

{# Dynamic objects delete command
E.g:
    @TABLE.command(name="delete")
    @click.argument("key1")
    @click.argument("key2")
    def TABLE_object_add(db, key1, key2):
#}
{% macro config_dynamic_object_delete(table, object) %}
@{{ table.name }}.command(name="delete")
{%- for key in object["keys"] %}
@click.argument("{{ make_cli_name(key.name) }}")
{%- endfor %}
@clicommon.pass_db
def {{ table.name }}_delete(db,
                        {{ object["keys"]|map(attribute="name")|join(",") }}):
    """ Delete object in {{ table.name }}. """

    table = "{{ table.name }}"
    key = {{ key_converter(object["keys"]) }}
    try:
        del_entry_validated(db.cfg, table, key)
    except Exception as err:
        exit_cli(f"Error: {err}", fg="red")
{% endmacro %}

{% macro config_dynamic_object(table, object) %}
{{ config_dynamic_object_add(table, object) }}
{{ config_dynamic_object_update(table, object) }}
{{ config_dynamic_object_delete(table, object) }}
{{ config_object_list_update_all(table, object) }}
{% endmacro %}


{% for table in tables %}
@click.group(name="{{ make_cli_name(table.name) }}",
             cls=clicommon.AliasedGroup)
def {{ table.name }}():
    """ {{ table.description|default("") }} """

    pass

{% if "static-objects" in table %}
{% for object in table["static-objects"] %}
{{ config_static_object(table, object) }}
{% endfor %}
{% elif "dynamic-objects" in table %}
{% for object in table["dynamic-objects"] %}
{{ config_dynamic_object(table, object) }}
{% endfor %}
{% endif %}
{% endfor %}

def register(cli):
{%- for table in tables %}
    cli.add_command({{ table.name }})
{%- endfor %}
